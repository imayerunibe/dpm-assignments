correct == 1 &
prime_congruency == "congruent") |
(trialcode == "prime_negative" &
correct == 0 &
prime_congruency == "congruent") ~ "yes",
TRUE ~"no"))
View(sanity_check_2)
# sanity check 2:
sanity_check_2 <- data_correct_trials |>
mutate(check2 = case_when((trialcode == "prime_positive" &
correct == 1 &
prime_congruency == "congruent") |
(trialcode == "prime_negative" &
correct == 0 &
prime_congruency == "congruent")|
(trialcode == "prime_positive" &
correct == 0 &
prime_congruency == "incongruent") |
(trialcode == "prime_negative" &
correct == 1 &
prime_congruency == "incongruent")~ "yes",
TRUE ~"no"))
sanity_check_2 %>% count(check2 = "yes") %>% kable() %>%
kable_classic(full_width = F)
sanity_check_2 %>% count(check2 = "no") %>% kable() %>%
kable_classic(full_width = F)
sanity_check_2 %>% count(check2 = "yes") %>% kable() %>%
kable_classic(full_width = F)
sanity_check_2 %>% count(check2 = "no") %>% kable() %>%
kable_classic(full_width = F)
sanity_check_2 %>% count(check2 == "no") %>% kable() %>%
kable_classic(full_width = F)
sanity_check_2 %>% count(word = "no") %>% kable() %>%
kable_classic(full_width = F)
data_test_san_2 <- sanity_check_2%>%
select("check2" = "yes") %>%
na.omit(T) %>%
tabyl(check2) %>%
adorn_pct_formatting(digits = 2)
data_test_san_2 <- sanity_check_2%>%
select("check2" = "yes") %>%
na.omit(T) %>%
tabyl(check2) %>%
adorn_pct_formatting(digits = 2)
data_sanity_check_2 <- sanity_check_2%>%
select("check2" = "yes") %>%
na.omit(T) %>%
tabyl(check2) %>%
adorn_pct_formatting(digits = 2)
data_sanity_check_2 <- sanity_check_2 |>
select("check2" = yes) |>
na.omit(T) %>%
tabyl(check2) %>%
adorn_pct_formatting(digits = 2)
data_sanity_check_2 <- sanity_check_2 |>
select("check2" == "yes") |>
na.omit(T) %>%
tabyl(check2) %>%
adorn_pct_formatting(digits = 2)
data_sanity_check_2 <- sanity_check_2 |>
select("check2") |>
na.omit(T) |>
tabyl(check2) |>
adorn_pct_formatting(digits = 2)
View(data_sanity_check_2)
sanity_check_2 |>
select("check2") |>
na.omit(T) |>
tabyl(check2) |>
adorn_pct_formatting(digits = 2)
# creating AMP score
data_prob_correct <- data_correct_trials |>
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "congruent"))
View(data_amp_raw)
# creating AMP score
data_prob_correct <- data_correct_trials |>
group_by(subject) |>
summarize(amp_score = sum(prime_congruency == "congruent")/n)
# creating AMP score
data_prob_correct <- data_correct_trials |>
group_by(subject) |>
summarize(amp_score = mean(prime_congruency == "congruent"))
# creating AMP score
data_prob_correct <- data_correct_trials |>
group_by(subject) |>
summarize(amp_score = mean(prime_congruency == "congruent"))
data_correct_trials <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
select(subject, trialcode, correct) |>
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent"))
# creating AMP score
data_prob_correct <- data_correct_trials |>
group_by(subject) |>
summarize(amp_score = mean(prime_congruency == "congruent"))
View(data_amp_raw)
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE)) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE))
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 2)) |>
kable_classic(full_width = FALSE)
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
library(tidyverse)
library(janitor) # for clean_names()
library(stringr)
# demographics
data_demographics_raw <- read_csv("../data/raw/data_demographics_raw.csv") |>
janitor::clean_names()
# data_demographics_raw_messy <- read_csv("../data/raw/data_demographics_raw_messy.csv", skip = 2) |>
#   janitor::clean_names()
# self report measure
data_selfreport_raw <- read_csv("../data/raw/data_selfreport_raw.csv") |>
janitor::clean_names()
# affect attribution procedure
data_amp_raw <- read_csv("../data/raw/data_amp_raw.csv") |>
janitor::clean_names()
dat_age_gender <- data_demographics_raw |>
select(subject, date, time, trialcode, response) |>
pivot_wider(names_from = trialcode,
values_from = response) |>
mutate(gender = tolower(gender),
gender = stringr::str_remove_all(gender, regex("\\W+")), # regex is both very useful and awful to write
gender = case_when(gender == "female" ~ gender,
gender == "male" ~ gender,
gender == "nonbinary" ~ gender,
gender == "woman" ~ "female",
gender == "man" ~ "male",
TRUE ~ "other/missing/error"),
age = case_when(str_detect(age, "^[0-9]+$") ~ age, # if the value is only numbers, keep it.
TRUE ~ "other/missing/error"))
data_amp_performance_criteria <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
mutate(latency_prob = if_else(latency < 100, TRUE, FALSE)) |>
group_by(subject) |>
summarize(proportion_fast_trials_amp = mean(latency_prob)) |>
mutate(exclude_amp_performance = ifelse(proportion_fast_trials_amp > 0.10, "exclude", "include"))
# determine modal number of trials
data_amp_completeness <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
group_by(subject) |>
count() |>
ungroup() |>
mutate(exclude_amp_completeness = ifelse(n == 72, "include", "exclude")) |>
select(-n)
# data_amp_completeness |>
#   count(n)
# trial level data
data_selfreport_trial_level <- data_selfreport_raw |>
select(subject, trialcode, response) |>
filter(trialcode %in% c("like", "prefer", "positive")) |>
rename(item = trialcode) |>
filter(response != "Ctrl+'B'") |>
mutate(response = as.numeric(response))
# mean scored
data_selfreport_mean_score <- data_selfreport_trial_level |>
group_by(subject) |>
summarize(mean_evaluation = mean(response, na.rm = TRUE))
# combined
data_selfreport_scored <-
full_join(data_selfreport_trial_level |>
pivot_wider(names_from = "item",
values_from = "response"),
data_selfreport_mean_score,
by = "subject")
data_correct_trials <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
select(subject, trialcode, correct) |>
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent"))
# creating AMP score
data_prob_correct <- data_correct_trials |>
group_by(subject) |>
summarize(amp_score = mean(prime_congruency == "congruent"))
# sanity check 1: does the probability of congruent trials and the probability of incongruent trials add up to 1?
# overall score:
sanity_check_1_overall <- data_correct_trials |>
select("prime_congruency") |>
na.omit(T) |>
tabyl(prime_congruency) |>
adorn_pct_formatting(digits = 2)
# per participant:
data_prob_incorrect <- data_correct_trials |>
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "incongruent"))
sanity_check_1_subject <- data_prop_correct |>
full_join(data_prob_incorrect,by="subject") |>
mutate(check1 = amp_score.x + amp_score.y)
# all probabilities add up to 1.
# sanity check 2: does the variable "prime_congruency" lable any congruent trials as incongruent or vice versa?
sanity_check_2 <- data_correct_trials |>
mutate(check2 = case_when((trialcode == "prime_positive" &
correct == 1 &
prime_congruency == "congruent") |
(trialcode == "prime_negative" &
correct == 0 &
prime_congruency == "congruent")|
(trialcode == "prime_positive" &
correct == 0 &
prime_congruency == "incongruent") |
(trialcode == "prime_negative" &
correct == 1 &
prime_congruency == "incongruent")~ "yes",
TRUE ~"no"))
sanity_check_2 |>
select("check2") |>
na.omit(T) |>
tabyl(check2) |>
adorn_pct_formatting(digits = 2)
# all correctly labelled trials are marked with "yes". no trials are marked with "no".
# sanity check 3:
# combine all dfs created in the previous chunks
data_processed_temp <- dat_age_gender |>
full_join(data_selfreport_scored, by = "subject") |>
full_join(data_amp_performance_criteria, by = "subject") |>
full_join(data_amp_completeness, by = "subject")
# flag all subjects with more than one row in the wide-format data. these should be excluded in the analysis.
# a more elaborate approach would be to track down the individual dupicate cases and determine which of the mulitiple cases should be retained.
data_processed_duplicates <- data_processed_temp |>
count(subject) |>
mutate(exclude_duplicate_data = if_else(n > 1, "exclude", "include")) |>
select(-n)
# join in the duplicates df
data_processed_before_exclusions <- data_processed_temp |>
full_join(data_processed_duplicates, by = "subject")
# create a master exclude_participant variable
data_processed <- data_processed_before_exclusions |>
mutate(exclude_participant = case_when(tolower(age) == "test" ~ "exclude",
tolower(gender) == "test" ~ "exclude",
is.na(mean_evaluation) ~ "exclude",
# in this case we will exclude participants with missing demographics data or outcomes measures data.
# Note that "list-wise exclusions" like this aren't always justified, as missingness often isn't at random.
# How to treat missing data is a  whole area of work in itself, which we wont cover here.
is.na(age) ~ "exclude",
is.na(gender) ~ "exclude",
exclude_amp_performance == "exclude" ~ "exclude",
exclude_duplicate_data == "exclude" ~ "exclude",
exclude_amp_completeness == "exclude" ~ "exclude",
TRUE ~ "include"))
# in case this dir doesn't exist, create it
dir.create("../data/processed/")
# save data to disk in that dir
write_csv(data_processed, "../data/processed/data_processed.csv")
person_check <- data_correct_trials |>
filter(504546409)
person_check <- data_correct_trials |>
filter(subject = 504546409)
person_check <- data_correct_trials |>
filter(subject = "504546409")
person_check <- data_correct_trials |>
filter(subject == "504546409")
View(person_check)
summarize(amp_score = mean(prime_congruency == "congruent")
person_check <- data_correct_trials |>
person_check <- data_correct_trials |>
summarize(amp_score = mean(prime_congruency == "congruent")
person_check <- data_correct_trials |>
person_check <- data_correct_trials |>
filter(subject == "504546409") |>
summarize(amp_score = mean(prime_congruency == "congruent"))
View(data_prop_correct)
# overall score:
sanity_check_2_overall <- data_correct_trials |>
select("prime_congruency") |>
na.omit(T) |>
tabyl(prime_congruency) |>
adorn_pct_formatting(digits = 2)
sanity_check_2_subject <- data_prop_correct |>
full_join(data_prob_incorrect,by="subject") |>
mutate(check1 = amp_score.x + amp_score.y)
View(data_prob_incorrect)
sanity_check_2_subject <- data_prob_correct |>
full_join(data_prob_incorrect,by="subject") |>
mutate(check1 = amp_score.x + amp_score.y)
data_correct_trials <- data_amp_raw |>
filter(blockcode != "practice",
trialcode != "instructions") |>
select(subject, trialcode, correct) |>
mutate(prime_congruency = case_when((trialcode == "prime_positive" &
correct == 1 ) |
(trialcode == "prime_negative" &
correct == 0)~ "congruent",
TRUE ~"incongruent"))
# creating AMP score
data_prob_correct <- data_correct_trials |>
group_by(subject) |>
summarize(amp_score = mean(prime_congruency == "congruent"))
# sanity check 1: visual inspection -> looking at data_correct_trials, the first participant "504546409" has 8 trials, 3 of which are marked as "congruent". 3/8 = 0.375. i ran the code for this subject individually and also got 0.375.
person_check <- data_correct_trials |>
filter(subject == "504546409") |>
summarize(amp_score = mean(prime_congruency == "congruent"))
# sanity check 2: does the probability of congruent trials and the probability of incongruent trials add up to 1? Result: all probabilities add up to 1.
# overall score:
sanity_check_2_overall <- data_correct_trials |>
select("prime_congruency") |>
na.omit(T) |>
tabyl(prime_congruency) |>
adorn_pct_formatting(digits = 2)
# per participant:
data_prob_incorrect <- data_correct_trials |>
group_by(subject) %>%
summarize(amp_score = mean(prime_congruency == "incongruent"))
sanity_check_2_subject <- data_prob_correct |>
full_join(data_prob_incorrect,by="subject") |>
mutate(check1 = amp_score.x + amp_score.y)
# sanity check 3: does the variable "prime_congruency" lable any congruent trials as incongruent or vice versa?
sanity_check_3 <- data_correct_trials |>
mutate(check3 = case_when((trialcode == "prime_positive" &
correct == 1 &
prime_congruency == "congruent") |
(trialcode == "prime_negative" &
correct == 0 &
prime_congruency == "congruent")|
(trialcode == "prime_positive" &
correct == 0 &
prime_congruency == "incongruent") |
(trialcode == "prime_negative" &
correct == 1 &
prime_congruency == "incongruent")~ "yes",
TRUE ~"no"))
sanity_check_3 |>
select("check3") |>
na.omit(T) |>
tabyl(check3) |>
adorn_pct_formatting(digits = 2)
# Result: all correctly labelled trials are marked with "yes". no trials are marked with "no".
View(data_correct_trials)
View(data_prob_correct)
View(data_correct_trials)
View(data_amp_raw)
View(data_demographics_raw)
View(dat_age_gender)
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by=subject)
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject")
View(dat_age_gender_score)
dat_age_gender_score |>
group_by(gender) |>
```
dat_age_gender_score |>
group_by(gender)
View(dat_age_gender)
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
filter(gender = "female")
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
filter(gender == "female")
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
filter(gender == "female") |>
mean(amp_score)
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
drop_na()
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
drop_na() |>
filter(gender == "female") |>
mean(amp_score)
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
drop_na() |>
filter(gender == "female") |>
mean(amp_score)
dat_age_gender_score |>
drop_na() |>
filter(gender == "female") |>
mean(amp_score)
dat_age_gender_score |>
filter(gender == "female") |>
mean(amp_score)
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject")
dat_age_gender_score |>
drop_na() |>
filter(gender == "female") |>
mean(amp_score)
View(dat_age_gender_score)
dat_age_gender_score |>
filter(gender == "female") |>
mean(amp_score)
dat_age_gender_score |>
filter(gender == "female") |>
mean(amp_score)
assignment_8 <- dat_age_gender_score |>
filter(gender == "female") |>
mean(amp_score)
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject")|>
drop_na() |>
filter(gender == "female") |>
mean(amp_score)
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject")|>
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject")|>
dat_descriptives_amp <-
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject")|>
dat_descriptives_amp <- dat_age_gender_score |>
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject")|>
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject")
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
na.omit()
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
na.omit()|>
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
na.omit()|>
data_descriptives_amp <-
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
na.omit()|>
data_descriptives_amp <- dat_age_gender_score |>
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
dat_age_gender_score <- dat_age_gender |>
full_join(data_prob_correct, by="subject") |>
na.omit()
data_descriptives_amp <- dat_age_gender_score |>
group_by(group = gender) |>
summarise(Mean = mean(amp_score, na.rm = TRUE),
SD = sd(amp_score, na.rm = TRUE))
view(data_descriptives_amp)
