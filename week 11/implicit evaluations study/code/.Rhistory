kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
install.packages("ggExtra")
install.packages("devtools")
devtools::install_github("daattali/ggExtra")
View(data_processed_after_exclusions)
ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = subject, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggMarginal(type = "histogram") +
ggtitle("Scatter Plot with Marginal Histograms and Regression Lines by Gender") +
theme_minimal()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggextra")
library(ggplot2)
library(ggextra)
install.packages("ggextra")
install.packages("ggExtra")
library(ggplot2)
library(ggextra)
library(ggExtra)
ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = subject, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggMarginal(type = "histogram") +
ggtitle("Scatter Plot with Marginal Histograms and Regression Lines by Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = subject, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggMarginal(type = "histogram", margins = "both") +  # Adjusted the type and added margins
ggtitle("Scatter Plot with Marginal Histograms and Regression Lines by Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = subject, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter Plot with Marginal Histograms and Regression Lines by Gender") +
theme_minimal() |>
ggMarginal(type = "histogram")
scatter_plot <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = subject, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter Plot with Regression Lines by Gender") +
theme_minimal()
# Add marginal histograms using ggMarginalHist
plot_with_histograms <- ggMarginalHist(scatter_plot, bins = 30)
# Add marginal histograms using ggMarginalHist
plot_with_histograms <- ggMarginal(scatter_plot, type "histogram")
# Add marginal histograms using ggMarginalHist
plot_with_histograms <- ggMarginal(scatter_plot, type = "histogram")
# Print the plot
print(plot_with_histograms)
colors <- viridis_pal(begin = 0.0, end = 1.0, option = "mako")(10)
library(ggrepel)
colors <- viridis_pal(begin = 0.0, end = 1.0, option = "mako")(10)
install.packages(viridis)
install.packages("viridis")
library(viridis)
colors <- viridis_pal(begin = 0.0, end = 1.0, option = "mako")(10)
library(viridisLite)
colors <- viridis_pal(begin = 0.0, end = 1.0, option = "mako")(10)
colors
show_col(colors)
library(scales)
show_col(colors)
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
geom_text_repel() + labs(title = "geom_text_repel()")
library(ggplot2)
library(ggmagnify)
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
geom_magnify(from = c(0.4, 0.7, 1 ,2), to = c(0.25,0.75,3,5),
shadow = TRUE)
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free")
ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(values = c("female" = "blue", "male" = "red", "nonbinary" = "green"),
labels = c("Women", "Men", "Nonbinary")) +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(values = c("female" = "blue", "male" = "red", "nonbinary" = "green"),
labels = c("Women", "Men", "Nonbinary")) +
theme_minimal()
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender, levels = c("male", "female", "nonbinary"))
ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(values = c("female" = "blue", "male" = "red", "nonbinary" = "green"),
labels = c("Women", "Men", "Nonbinary")) +
theme_minimal()
ggplot(data_processed_after_exclusions$gender, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(values = c("female" = "blue", "male" = "red", "nonbinary" = "green"),
labels = c("Women", "Men", "Nonbinary")) +
theme_minimal()
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender, levels = c("male", "female", "nonbinary"))
ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(values = c("female" = "blue", "male" = "red", "nonbinary" = "green"),
labels = c("Women", "Men", "Nonbinary")) +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(values = c("female" = "blue", "male" = "red", "nonbinary" = "green"),
labels = c("Nonbinary", Women", "Men"")) +
ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(values = c("female" = "blue", "male" = "red", "nonbinary" = "green"),
labels = c("Nonbinary", Women", "Men)) +
labels = c("Nonbinary", Women", "Men")) +
ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(values = c("female" = "blue", "male" = "red", "nonbinary" = "green"),
labels = c("Nonbinary", "Women", "Men")) +
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(values = c("female" = "blue", "male" = "red", "nonbinary" = "green"),
labels = c("Women", "Men", "Nonbinary")) +  # Specify custom labels
theme_minimal()
ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(
values = c("nonbinary" = "green", "female" = "blue", "male" = "red"),
labels = c("Nonbinary", "Women", "Men"),
breaks = c("nonbinary", "female", "male")
) +  # Specify custom labels and order for the legend
theme_minimal()
devtools::install_github("thomasp85/patchwork")
library(patchwork)
violin_plot_gender <- ggplot(data_processed_after_exclusions, aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot Split by Gender") +
scale_fill_manual(
values = c("nonbinary" = "green", "female" = "blue", "male" = "red"),
labels = c("Nonbinary", "Women", "Men"),
breaks = c("nonbinary", "female", "male")
) +
theme_minimal()
split_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free")
plot_magnified <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
geom_magnify(from = c(0.4, 0.7, 1 ,2), to = c(0.25,0.75,3,5),
shadow = TRUE)
plot_codes <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
geom_text_repel() + labs(title = "geom_text_repel()")
combined_plots <- (violin_plot_gender | plot_with_histograms) / scatter_plot
print(combined_plots)
View(scatter_plot)
combined_plots <- (violin_plot_gender | plot_with_histograms) / plot_codes
print(combined_plots)
combined_plots <- (violin_plot_gender | plot_with_histograms) / scatter_plot
print(combined_plots)
ggsave("combined_plot.png", combined_plots, dpi = 300)
ggsave("combined_plot.pdf", combined_plots)
combined_plots <- (violin_plot_gender | plot_magnified) / scatter_plot
print(combined_plots)
combined_plots <- (violin_plot_gender | plot_codes) / scatter_plot
print(combined_plots)
ggsave("combined_plot.png", combined_plots, dpi = 300)
ggsave("combined_plot.pdf", combined_plots)
combined_plots <- (split_plot_gender | plot_codes) / scatter_plot
print(combined_plots)
ggsave("combined_plot.png", combined_plots, dpi = 300)
data_nonbinary <- data_processed_after_exclusions[data_processed_after_exclusions$gender == "nonbinary", ]
data_female <- data_processed_after_exclusions[data_processed_after_exclusions$gender == "female", ]
t_test_result <- t.test(AMP_score ~ gender, data = data_processed_after_exclusions)
data_male <- data_processed_after_exclusions[data_processed_after_exclusions$gender == "male", ]
data_female <- data_processed_after_exclusions[data_processed_after_exclusions$gender == "female", ]
# Independent two-sample t-test
t_test_result <- t.test(AMP_score ~ gender, data = rbind(data_male, data_female))
# Print the test result
print(t_test_result)
scatter_plot2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggmarginal(type = "histogram") +  # Add axial histograms
ggtitle("Scatter Plot with Axial Histograms and Regression Lines by Gender") +
theme_minimal()
scatter_plot2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggMarginal(type = "histogram") +  # Add axial histograms
ggtitle("Scatter Plot with Axial Histograms and Regression Lines by Gender") +
theme_minimal()
plot_with_histograms2 <- ggMarginal(scatter_plot2, type = "histogram")
scatter_plot2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter Plot with Axial Histograms and Regression Lines by Gender") +
theme_minimal()
plot_with_histograms2 <- ggMarginal(scatter_plot2, type = "histogram")
scatter_plot2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter Plot with Axial Histograms and Regression Lines by Gender") +
theme_minimal()
plot_with_histograms2 <- ggMarginal(scatter_plot2, type = "histogram")
split_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free")
split_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free")
plot_magnified <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
geom_magnify(from = c(0.4, 0.7, 1 ,2), to = c(0.25,0.75,3,5),
shadow = TRUE)
print(split_plot_gender)
scatter_plot2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter Plot with Axial Histograms and Regression Lines by Gender") +
theme_minimal()
plot_with_histograms2 <- ggMarginal(scatter_plot2, type = "histogram")
# Print the plot
print(scatter_plot2)
print(plot_with_histograms2)
print(plot_codes)
print(plot_magnified)
amp_scores <- data_processed_after_exclusions$AMP_score
self_reported_evaluations <- data_processed_after_exclusions$mean_evaluation
# Perform Pearson's correlation test
cor_test_result <- cor.test(amp_scores, self_reported_evaluations)
# Print the test result
print(cor_test_result)
# Create the facetted plot with the reordered levels
split_plot_gender_new <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free")
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender, levels = c("male", "female", "nonbinary"))
# Create the facetted plot with the reordered levels
split_plot_gender_new <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free")
# Print the plot
print(split_plot_gender_new)
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender, levels = c("nonbinary", "female", "male"))
# Create the facetted plot with the reordered levels
split_plot_gender_new <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free")
# Print the plot
print(split_plot_gender_new)
split_plot_gender_new <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free", labeller = labeller(gender = c(nonbinary = "Nonbinary", female = "Female", male = "Male")))
# Print the plot
print(split_plot_gender_new)
#violin plot
violin_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot by Gender") +
xlab("Gender") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_x_discrete(labels = c(nonbinary = "Nonbinary", female = "Female", male = "Male"))
print(violin_plot_gender)
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
# Independent samples t-test
t_test_result <- t.test(mean_evaluation ~ gender, data = data_processed_after_exclusions)
#version 1: comparing only women and men
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
# Independent samples t-test for men
t_test_result_male <- t.test(mean_evaluation ~ gender, data = data_male)
# Combine nonbinary and female into a single group
data_processed_after_exclusions$gender_combined <- factor(
ifelse(data_processed_after_exclusions$gender %in% c("nonbinary", "female"), "nonbinary_female", "male")
)
# Independent samples t-test
t_test_result <- t.test(mean_evaluation ~ gender_combined, data = data_processed_after_exclusions)
# Print the test result
print(t_test_result)
#version 1: comparing only women and men
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
# Independent samples t-test for men and women
t_test_result <- t.test(mean_evaluation ~ gender, data = rbind(data_male, data_female))
# Print the test result
print(t_test_result)
print(split_plot_gender_new)
t_test_result <- t.test(amp_scores ~ gender, data = rbind(data_male, data_female))
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender, levels = c("nonbinary", "female", "male"))
# Subset data for men and women
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
# Independent samples t-test
t_test_result <- t.test(AMP_score ~ gender, data = data_processed_after_exclusions)
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
t_test_result <- t.test(mean_evaluation ~ gender, data = rbind(data_male, data_female))
t_test_result <- t.test(amp_scores ~ gender, data = rbind(data_male, data_female))
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
# Wilcoxon rank-sum test
wilcox_result <- wilcox.test(amp_scores ~ gender, data = data_processed_after_exclusions)
kruskal_result <- kruskal.test(amp_scores ~ gender, data = data_processed_after_exclusions)
# Print the test result
print(kruskal_result)
###version 2: t test without nonbinary
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
t_test_result <- t.test(amp_scores ~ gender, data = rbind(data_male, data_female))
combined_plots <- (split_plot_gender | plot_codes) / scatter_plot2
print(combined_plots)
ggsave("combined_plot.png", combined_plots, dpi = 300)
