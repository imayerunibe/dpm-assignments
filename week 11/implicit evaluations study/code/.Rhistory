data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender, levels = c("nonbinary", "female", "male"))
# Subset data for men and women
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
# Independent samples t-test
t_test_result <- t.test(AMP_score ~ gender, data = data_processed_after_exclusions)
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
t_test_result <- t.test(mean_evaluation ~ gender, data = rbind(data_male, data_female))
t_test_result <- t.test(amp_scores ~ gender, data = rbind(data_male, data_female))
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
# Wilcoxon rank-sum test
wilcox_result <- wilcox.test(amp_scores ~ gender, data = data_processed_after_exclusions)
kruskal_result <- kruskal.test(amp_scores ~ gender, data = data_processed_after_exclusions)
# Print the test result
print(kruskal_result)
###version 2: t test without nonbinary
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
t_test_result <- t.test(amp_scores ~ gender, data = rbind(data_male, data_female))
combined_plots <- (split_plot_gender | plot_codes) / scatter_plot2
print(combined_plots)
ggsave("combined_plot.png", combined_plots, dpi = 300)
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
install.packages("ggplot2")
install.packages("ggExtra")
library(ggplot2)
library(ggExtra)
scatter_plot <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = subject, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter Plot with Regression Lines by Gender") +
theme_minimal()
plot_with_histograms <- ggMarginal(scatter_plot, type = "histogram")
print(plot_with_histograms)
scatter_plot2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter Plot with Axial Histograms and Regression Lines by Gender") +
theme_minimal()
plot_with_histograms2 <- ggMarginal(scatter_plot2, type = "histogram")
print(plot_with_histograms2)
library(ggrepel)
library(scales)
install.packages("viridis")
install.packages("ggplot2")
install.packages("ggplot2")
### violin plot
violin_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +  # Add jittered points for visibility
xlab("Gender") +
ylab("AMP score") +
theme_minimal() +
facet_wrap(~gender, scales = "free")
###scatter plot
split_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free")
###version 1: scatter plot
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender, levels = c("nonbinary", "female", "male"))
split_plot_gender_new <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free", labeller = labeller(gender = c(nonbinary = "Nonbinary", female = "Female", male = "Male")))
library(ggplot2)
library(ggplot2)
# set knit options
knitr::opts_chunk$set(message = FALSE,
warning = FALSE)
# disable scientific notation
options(scipen = 999)
library(tidyverse)
library(knitr)
library(kableExtra)
library(janitor)
library(scales)
data_processed <- read_csv("../data/processed/data_processed.csv")
data_processed_after_exclusions <- data_processed |>
filter(exclude_participant == "include")
data_processed |>
count(name = "n") |>
kable() |>
add_header_above(header = c("Whole sample" = 1)) |> # note that you can add header rows to tables like this. The "1" indicates the number of columns the header should span. The sum of these numbers must equal the number of columns or you'll get an error.
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
count(name = "n") |>
kable() |>
add_header_above(header = c("For analysis" = 1)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
mutate(age = as.numeric(age)) |>
summarise(Mean = mean(age, na.rm = TRUE),
SD = sd(age, na.rm = TRUE)) |>
mutate_all(.funs = janitor::round_half_up, digits = 1) |>
kable() |>
add_header_above(header = c("Age" = 2)) |>
kable_classic(full_width = FALSE)
data_processed_after_exclusions |>
rename(Gender = gender) |>
group_by(Gender) |>
summarise(n = n()) |>
mutate(Percent = paste0(round_half_up((n / sum(n)) * 100, 1), "%")) |>
mutate(Gender = stringr::str_to_sentence(Gender)) |> # Change the case of the Gender variable so that it prints nicely
kable() |>
kable_classic(full_width = FALSE)
# overall self-reported evaluations
dat_mean_ratings <- data_processed_after_exclusions |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n()) |>
mutate(group = "Full sample")
# self-reported evaluations by gender category
dat_mean_ratings_by_gender <- data_processed_after_exclusions |>
group_by(group = gender) |>
summarise(Mean = mean(mean_evaluation, na.rm = TRUE),
SD = sd(mean_evaluation, na.rm = TRUE),
n = n())
# combine both into one table
bind_rows(dat_mean_ratings,
dat_mean_ratings_by_gender) |>
select(Subset = group, Mean, SD, n) |> # select variables of interest, and rename one
mutate(Subset = stringr::str_to_sentence(Subset)) |> # Change the case of the Subset variable so that it prints nicely
mutate_if(is.numeric, round_half_up, digits = 2) |>
kable() |>
add_header_above(header = c(" " = 1, "Self-reported evaluations" = 3)) |>
kable_classic(full_width = FALSE)
ggplot(data_processed_after_exclusions, aes(x = mean_evaluation)) +
geom_histogram(binwidth = 1,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("Mean self-reported evaluation") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 7)) +
coord_cartesian(xlim = c(1, 7)) +
theme(panel.grid.minor = element_blank())
ggplot(data_processed_after_exclusions, aes(x = AMP_score)) +
geom_histogram(binwidth = 0.05,
boundary = 0,
fill = viridis_pal(begin = 0.45, option = "mako")(1),
color = viridis_pal(begin = 0.30, option = "mako")(1)) +
xlab("AMP score") +
ylab("Frequency") +
theme_linedraw() +
scale_x_continuous(breaks = pretty_breaks(n = 10))
library(ggplot2)
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(y = AMP_score,
x = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
geom_smooth(method = "lm",
color = viridis_pal(begin = 0.45, option = "mako")(1)) +
ylab("AMP score") +
xlab("Mean self-reported evaluation") +
theme_linedraw()
ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation)) +
geom_jitter(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw()
install.packages("ggplot2")
install.packages("ggExtra")
library(ggplot2)
library(ggExtra)
scatter_plot <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = subject, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter Plot with Regression Lines by Gender") +
theme_minimal()
plot_with_histograms <- ggMarginal(scatter_plot, type = "histogram")
print(plot_with_histograms)
scatter_plot2 <- ggplot(data_processed_after_exclusions, aes(x = AMP_score, y = mean_evaluation, color = gender)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE) +
ggtitle("Scatter Plot with Axial Histograms and Regression Lines by Gender") +
theme_minimal()
plot_with_histograms2 <- ggMarginal(scatter_plot2, type = "histogram")
print(plot_with_histograms2)
library(ggrepel)
library(scales)
install.packages("viridis")
library(viridis)
library(viridisLite)
colors <- viridis_pal(begin = 0.0, end = 1.0, option = "mako")(10)
colors
show_col(colors)
plot_codes <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
geom_text_repel() + labs(title = "geom_text_repel()")
print(plot_codes)
library(ggplot2)
library(ggmagnify)
plot_magnified <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
geom_magnify(from = c(0.4, 0.7, 1 ,2), to = c(0.25,0.75,3,5),
shadow = TRUE)
print(plot_magnified)
amp_scores <- data_processed_after_exclusions$AMP_score
self_reported_evaluations <- data_processed_after_exclusions$mean_evaluation
# Perform Pearson's correlation test
cor_test_result <- cor.test(amp_scores, self_reported_evaluations)
# Print the test result
print(cor_test_result)
# The Pearson correlation test between "AMP_scores" and "self_reported_evaluations" is not significant with a p-value greater than 0.05 (p = 0.2435). The confidence interval includes zero, indicating that the true correlation could plausibly be zero. Based on this analysis, there isn't sufficient evidence to conclude that there is a significant correlation between self-reported evaluation and evaluations of the AMP score in the population represented in this sample.
###scatter plot
split_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free")
print(split_plot_gender)
### histogram
### violin plot
###version 1: comparing only women and men
data_male <- subset(data_processed_after_exclusions, gender == "male")
data_female <- subset(data_processed_after_exclusions, gender == "female")
t_test_result <- t.test(mean_evaluation ~ gender, data = rbind(data_male, data_female))
print(t_test_result)
# The independent samples t-test comparing the mean evaluations between the men and the women is significant with a p-value smaller than 0.05 (p = 0.0106). The 95% confidence interval does not include 0, suggesting a statistically significant difference in mean evaluations between the women and men. Based on this analysis, there is evidence to suggest a statistically significant difference in mean evaluations between the women and men in this sample.
###version 2: combining women & nonbinary (= in german this marginalized group is called "Finta", i'm not sure if there is an equivalent term in english) and comparing it to the men
data_processed_after_exclusions$gender_combined <- factor(
ifelse(data_processed_after_exclusions$gender %in% c("nonbinary", "female"), "nonbinary_female", "male")
)
t_test_result <- t.test(mean_evaluation ~ gender_combined, data = data_processed_after_exclusions)
print(t_test_result)
# The independent samples t-test comparing the mean evaluations between the men and the women/nonbinary people is not significant with a p-value greater than 0.05 (p = 0.108). The 95% confidence interval includes 0, which indicates that the difference is not statistically significant. Based on this analysis, there is no strong evidence to conclude that the mean evaluations significantly differ between the men and the women/nonbinary people in this sample.
###version 1: scatter plot
data_processed_after_exclusions$gender <- factor(data_processed_after_exclusions$gender, levels = c("nonbinary", "female", "male"))
split_plot_gender_new <- ggplot(data_processed_after_exclusions,
aes(x = AMP_score,
y = mean_evaluation,
label = subject)) +
geom_point(color = viridis_pal(begin = 0.45, option = "mako")(1),
alpha = 0.5) +
xlab("AMP score") +
ylab("Mean self-reported evaluation") +
theme_linedraw() +
facet_wrap(~gender, scales = "free", labeller = labeller(gender = c(nonbinary = "Nonbinary", female = "Female", male = "Male")))
print(split_plot_gender_new)
###version 2: violin plot
violin_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_violin() +
ggtitle("Violin Plot by Gender") +
xlab("Gender") +
ylab("Mean self-reported evaluation") +
theme_minimal() +
scale_x_discrete(labels = c(nonbinary = "Nonbinary", female = "Female", male = "Male"))
print(violin_plot_gender)
kruskal_result <- kruskal.test(amp_scores ~ gender, data = data_processed_after_exclusions)
print(kruskal_result)
# The Kruskal-Wallis test is not significant with a p-value greater than 0.05 (p=0.989). Based on this analysis, there is not have enough evidence to conclude that the men, women and nonbinary people in this sample differ in their AMP scores.
View(violin_plot_gender)
### violin plot
violin_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = gender, y = AMP_score, fill = gender)) +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +  # Add jittered points for visibility
xlab("Gender") +
ylab("AMP score") +
theme_minimal() +
facet_wrap(~gender, scales = "free")
# Print the plot
print(violin_plot_gender)
### violin plot
violin_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +  # Add jittered points for visibility
xlab("Gender") +
ylab("AMP score") +
theme_minimal() +
facet_wrap(~gender, scales = "free")
print(violin_plot_gender)
### violin plot
violin_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +
theme_minimal() +
facet_wrap(~gender, scales = "free")
print(violin_plot_gender)
### histogram
histogram_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation, fill = gender)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30) +
theme_minimal() +
facet_wrap(~gender, scales = "free")
print(histogram_plot_gender)
### violin plot
violin_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = gender, y = mean_evaluation, fill = gender)) +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +
theme_minimal() +
facet_wrap(~gender, scales = "free")
print(histogram_plot_gender)
### histogram
histogram_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = gender, y= mean_evaluation, fill = gender)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30) +
theme_minimal() +
facet_wrap(~gender, scales = "free")
print(histogram_plot_gender)
### violin plot
violin_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = gender, y = mean_evaluation)) +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +
theme_minimal() +
facet_wrap(~gender, scales = "free")
print(histogram_plot_gender)
### histogram
histogram_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation, fill = gender)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30) +
xlab("AMP score") +
ylab("Frequency") +
theme_minimal() +
facet_wrap(~gender, scales = "free")
# Print the histogram
print(histogram_plot_gender)
### histogram
histogram_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation, fill = gender)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30) +
theme_minimal() +
facet_wrap(~gender, scales = "free")
# Print the histogram
print(histogram_plot_gender)
### violin plot
violin_plot_gender <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation)) +
geom_violin(alpha = 0.5) +
geom_jitter(width = 0.2, alpha = 0.5, color = "black") +
theme_minimal() +
facet_wrap(~gender, scales = "free")
# Print the histogram
print(histogram_plot_gender)
### version 3: histogram
histogram_plot_gender_new <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation, fill = gender)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30) + xlab("Mean Evaluation") +
ylab("Frequency") +
theme_minimal() +
facet_wrap(~gender, scales = "free")
print(histogram_plot_gender_new)
### version 3: histogram
histogram_plot_gender_new <- ggplot(data_processed_after_exclusions,
aes(x = mean_evaluation, fill = gender)) +
geom_histogram(position = "identity", alpha = 0.7, bins = 30) + xlab("Mean self-reported Evaluation") +
ylab("Frequency") +
theme_minimal() +
facet_wrap(~gender, scales = "free") +  facet_wrap(~gender, scales = "free", labeller = labeller(gender = c(nonbinary = "Nonbinary", female = "Female", male = "Male")))
print(histogram_plot_gender_new)
